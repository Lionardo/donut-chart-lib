{"version":3,"sources":["ng://donut-chart/lib/donut-chart.service.ts","ng://donut-chart/lib/donut-chart.component.ts","ng://donut-chart/lib/donut-chart.module.ts"],"names":["DonutChartService","Injectable","args","providedIn","DonutChartComponent","this","dataClickCallback","EventEmitter","isready","prototype","ngOnInit","ngAfterViewInit","containerId","initChart","ngOnDestroy","d3.select","window","on","_this","data","length","color","console","error","remove","margin","width","height","radius","Math","min","arc","d3.arc","innerRadius","outerRadius","arcs","d3.pie","padAngle","value","d","number","svg","append","attr","call","responsivefy","container","node","parentNode","parseInt","style","aspect","resize","targetWidth","round","colors","valueTextPrefix","prefixValue","fade","selection","selectAll","enter","i","e","callbackData","next","el","d3.selectAll","filter","nextSibling","dataText","dataValueText","select","text","Component","selector","template","Input","Output","DonutChartModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DonutChartService {\n\n  constructor() { }\n}\n","import { Component, OnInit, OnDestroy, Input, AfterViewInit, Output, EventEmitter } from '@angular/core';\nimport * as d3 from 'd3';\n\n@Component({\n  selector: 'iazi-charts-donut',\n  templateUrl: './donut-chart.component.html'\n})\nexport class DonutChartComponent implements OnInit, OnDestroy, AfterViewInit {\n  /**\n    [containerId] = string - the unique ID to select the container of the chart.\n    [data] = array - with object = name: \"some label\", number: value as number.\n    [prefixValue] = string - prefix fot he value to show example: marktwert.\n    [color] = array - with hex colors. Length of this array needs to be equal to data array!\n    (dataClickCallback) = emitter for the click event.\n   */\n  @Input() public containerId: string;\n  @Input() public data: any[];\n  @Input() public prefixValue: string;\n  @Input() public color: any[];\n  @Output() dataClickCallback = new EventEmitter<Object>();\n  public callbackData;\n  private isready = false;\n\n  constructor() { }\n  public ngOnInit() {\n\n  }\n  public ngAfterViewInit() {\n    this.isready = true;\n    if (this.containerId) {\n      this.initChart();\n    }\n  }\n  public ngOnDestroy() {\n    d3.select(window).on(`resize.${this.containerId}`, null);\n  }\n\n  public initChart() {\n    if (this.data.length !== this.color.length) {\n      console.error('data array lenght is not the same as the color array lenght!');\n      return false;\n    }\n\n    d3.select(`.${this.containerId}`).remove();\n\n    const margin = { top: 250, right: 0, bottom: 0, left: 470 };\n    const width = 960 - margin.left - margin.right;\n    const height = 700 - margin.top - margin.bottom;\n    const radius = Math.min(width, height) / 2;\n\n    const padAngle = 0.015;\n    const arc: any = d3.arc().innerRadius(radius * 0.67).outerRadius(radius - 1);\n    const data = this.data;\n    const arcs = d3.pie()\n      .padAngle(padAngle)\n      .value(function (d: any) { return d.number; });\n\n\n    const svg = d3.select(`#${this.containerId}`)\n      .append('svg')\n      .attr('width', width + margin.right + margin.left)\n      .attr('height', height + margin.top + margin.bottom)\n      .attr('class', this.containerId)\n      .call(responsivefy)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n\n    const colors = this.color;\n    const valueTextPrefix = this.prefixValue;\n\n    svg.selectAll('path')\n      .data(arcs(<any>data))\n      .enter()\n      .append('path')\n      .attr('fill', (d, i) => {\n        return this.color[i];\n      })\n      .attr('d', arc)\n      .style('cursor', 'pointer')\n      .on('click', (e) => {\n        this.callbackData = e.data;\n        this.dataClickCallback.next(this.callbackData);\n      })\n      .on('mouseover', function (d, i, el) { // d = data, i = index, el = elements\n\n        d3.selectAll(<any>el)\n          .filter(':not(:hover)') // filter the the one element that is being hovered\n          .call(fade, 0.4);\n\n        d3.select(this).style('stroke', colors[i]);\n        d3.select((<any>this).nextSibling).style('display', 'block'); // nextSibling = text element.\n        // show values\n        const dataText: any = d.data['name'];\n        const dataValueText: any = d.data['number'];\n        svg.select('text.text-tooltip')\n          .text(`${dataText}`);\n        svg.select('text.text-value-tooltip')\n          .text(`${valueTextPrefix} = ${dataValueText}`);\n      })\n      .on('mouseout', function (d, i, el) {\n        d3.selectAll(<any>el)\n          .call(fade, 1);\n        d3.selectAll(<any>el).style('stroke', 'none');\n        d3.selectAll('.histo-labels').style('display', 'none');\n        // remove text values\n        svg.select('text.text-tooltip')\n          .text(``);\n        svg.select('text.text-value-tooltip')\n          .text(``);\n      });\n\n\n    svg.append('text')\n      .attr('class', 'text-value-tooltip')\n      .attr('text-anchor', 'middle')\n      .style('font-size', '2rem')\n      .style('color', 'black')\n      .attr('dy', `${height * .8}`)\n      .text('');\n\n    svg.append('text')\n      .attr('class', 'text-tooltip')\n      .attr('text-anchor', 'middle')\n      .style('font-size', '1.8rem')\n      .style('color', 'black')\n      .attr('dy', `${height * .88}`)\n      .text('');\n\n    // ===================\n    function fade(selection, value) {\n      selection.style('fill-opacity', value);\n    }\n\n    function responsivefy(svg) {\n      // get container + svg aspect ratio\n      const container = d3.select(svg.node().parentNode);\n      const width = parseInt(svg.style('width'), 10);\n      const height = parseInt(svg.style('height'), 10);\n      const aspect = width / height;\n\n      // add viewBox and preserveAspectRatio properties,\n      // and call resize so that svg resizes on inital page load\n      svg.attr('viewBox', '0 0 ' + width + ' ' + height)\n        .attr('preserveAspectRatio', 'xMinYMid')\n        .call(resize);\n\n      d3.select(window).on('resize.' + container.attr('id'), resize);\n\n      // get width of container and resize svg to fit it\n      function resize() {\n        const targetWidth = parseInt(container.style('width'), 10);\n        svg.attr('width', targetWidth);\n        svg.attr('height', Math.round(targetWidth / aspect));\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DonutChartComponent } from './donut-chart.component';\n\n@NgModule({\n  declarations: [DonutChartComponent],\n  imports: [\n  ],\n  exports: [DonutChartComponent]\n})\nexport class DonutChartModule { }\n"]}